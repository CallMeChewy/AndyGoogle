#!/bin/bash
# ClaudeStart - Smart Claude Code launcher with session management
# Handles archiving previous sessions and restoring context

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
ARCHIVER="$SCRIPT_DIR/claude-chat-archiver.py"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${PURPLE}üèîÔ∏è  ClaudeStart - Project Himalaya Session Manager${NC}"
echo "=================================================="

# Function to show help
show_help() {
    echo "Usage: ClaudeStart [options]"
    echo ""
    echo "Options:"
    echo "  --new           Start fresh session (no restoration)"
    echo "  --archive-only  Archive current session and exit"
    echo "  --list          List archived sessions and exit"
    echo "  --restore ID    Restore specific session ID"
    echo "  --help          Show this help"
    echo ""
    echo "Default: Archive current, show recent sessions, start Claude"
}

# Parse command line arguments
ARCHIVE_ONLY=false
LIST_ONLY=false
NEW_SESSION=false
RESTORE_ID=""

while [[ $# -gt 0 ]]; do
    case $1 in
        --new)
            NEW_SESSION=true
            shift
            ;;
        --archive-only)
            ARCHIVE_ONLY=true
            shift
            ;;
        --list)
            LIST_ONLY=true
            shift
            ;;
        --restore)
            RESTORE_ID="$2"
            shift 2
            ;;
        --help)
            show_help
            exit 0
            ;;
        *)
            echo -e "${RED}‚ùå Unknown option: $1${NC}"
            show_help
            exit 1
            ;;
    esac
done

# Function to archive current session
archive_current_session() {
    echo -e "${BLUE}üì¶ Archiving current session...${NC}"
    
    # Prompt for session summary
    echo -e "${YELLOW}üìù Enter session summary (or press Enter for auto-generated):${NC}"
    read -r SESSION_SUMMARY
    
    if [[ -z "$SESSION_SUMMARY" ]]; then
        # Auto-generate summary based on recent activity
        SESSION_SUMMARY="Claude session $(date '+%Y-%m-%d %H:%M') - $(basename $(pwd))"
    fi
    
    # Archive the session
    python3 "$ARCHIVER" --summary "$SESSION_SUMMARY"
    
    if [[ $? -eq 0 ]]; then
        echo -e "${GREEN}‚úÖ Session archived successfully${NC}"
    else
        echo -e "${RED}‚ùå Failed to archive session${NC}"
    fi
}

# Function to list recent sessions
list_recent_sessions() {
    echo -e "${BLUE}üìã Recent Claude sessions:${NC}"
    python3 "$ARCHIVER" --action list
}

# Function to restore session context
restore_session_context() {
    if [[ -n "$RESTORE_ID" ]]; then
        echo -e "${BLUE}üîÑ Restoring session: $RESTORE_ID${NC}"
        python3 "$ARCHIVER" --action restore --session-id "$RESTORE_ID"
    else
        echo -e "${YELLOW}üí° Available sessions for restoration:${NC}"
        python3 "$ARCHIVER" --action list
        echo ""
        echo -e "${YELLOW}To restore a specific session, use: ClaudeStart --restore SESSION_ID${NC}"
    fi
}

# Function to start Claude with context prompt
start_claude_with_context() {
    echo -e "${GREEN}üöÄ Starting Claude Code...${NC}"
    echo ""
    echo -e "${YELLOW}üí° Context restoration tip:${NC}"
    echo "When Claude starts, say:"
    echo -e "${BLUE}\"Continue from previous session - [brief description of what you were working on]\"${NC}"
    echo ""
    echo -e "${PURPLE}üèîÔ∏è Project Himalaya workflow ready!${NC}"
    echo ""
    
    # Start Claude Code
    claude-code
}

# Main execution logic
main() {
    # Handle specific flags
    if [[ "$LIST_ONLY" == true ]]; then
        list_recent_sessions
        exit 0
    fi
    
    if [[ "$ARCHIVE_ONLY" == true ]]; then
        archive_current_session
        exit 0
    fi
    
    # Default workflow
    if [[ "$NEW_SESSION" != true ]]; then
        # Archive current session (if there's meaningful history)
        HISTORY_LINES=$(history | wc -l)
        if [[ $HISTORY_LINES -gt 10 ]]; then
            echo -e "${YELLOW}ü§î Detected active session. Archive before starting new Claude session?${NC}"
            echo "  [y] Yes, archive current work"
            echo "  [n] No, start fresh"
            echo "  [s] Skip and show recent sessions only"
            read -r -p "Choice [y/n/s]: " CHOICE
            
            case $CHOICE in
                [Yy]* )
                    archive_current_session
                    echo ""
                    ;;
                [Ss]* )
                    echo -e "${BLUE}‚è≠Ô∏è  Skipping archive...${NC}"
                    ;;
                * )
                    echo -e "${BLUE}üÜï Starting fresh session...${NC}"
                    ;;
            esac
        fi
        
        # Show context for restoration
        if [[ -z "$RESTORE_ID" ]]; then
            restore_session_context
        else
            python3 "$ARCHIVER" --action restore --session-id "$RESTORE_ID"
        fi
        
        echo ""
    fi
    
    # Start Claude
    start_claude_with_context
}

# Check if archiver exists
if [[ ! -f "$ARCHIVER" ]]; then
    echo -e "${RED}‚ùå Claude archiver not found at: $ARCHIVER${NC}"
    echo "Please ensure claude-chat-archiver.py is in the same directory as ClaudeStart"
    exit 1
fi

# Run main function
main