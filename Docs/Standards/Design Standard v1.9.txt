File: Design Standard v1.9.md
Path: Docs/Standards/Design Standard v1.9.md
Standard: AIDEV-PascalCase-1.9
Created: 2025-07-07
Last Modified: 2025-07-07 04:38PM

Design Standard v1.9 - Web-Enhanced & AI-Compliant Edition

Author & Project

Author: Herb Bowers
Project: Project Himalaya
Contact: HimalayaProject1@gmail.com

üö® CRITICAL AI COLLABORATION REQUIREMENTS

MANDATORY FIRST STEP FOR ALL AI ASSISTANTS

Before generating ANY code, AI assistants MUST:

Search project knowledge for "Design Standard v1.9"
Acknowledge understanding of header requirements in response
Commit to using ACTUAL CURRENT TIME in all headers
Confirm compliance before proceeding

TIMESTAMP COMPLIANCE - ABSOLUTE REQUIREMENT

‚ùå WRONG - Static/Copy-Paste Timestamps:

‚úÖ CORRECT - Actual Current Time:

SESSION START PROTOCOL
Every AI session MUST begin with:

Table of Contents

Purpose & Philosophy
Header Format
Naming Conventions
Web Framework Exceptions
Design Standards
File & Directory Structure
Project Setup Standards
Automated File Management
Development Environment
Imports & Dependencies
Coding Style & Documentation
Testing & Quality
SQL and Data Access
Modern Web Development
AI Collaboration Practices
Attribution & License
Revision History

Purpose & Philosophy

This standard documents the unique code style, structure, and best practices for the Project Himalaya codebase.

Philosophy: My code, my way‚Äîclarity, maintainability, and personality matter.
COD (Compulsive Order Disorder) is a feature: consistent formatting, headers, and naming make the codebase navigable for humans, AI, and any future inheritors (post-apocalypse included).
Web-First Approach: Enhanced for modern web development while maintaining core principles.
Where required, ecosystem and framework conventions are respected, but all other code follows these personal standards.

Header Format

ALL FILES in the project must begin with a standardized header immediately after the shebang (for executable scripts). This includes Python (.py), shell scripts (.sh), markdown (.md), text files (.txt), configuration files, SQL files (.sql), HTML (.html), CSS (.css), JavaScript (.js), and any other project documents.

Python Files (.py)

HTML Files (.html)

CSS Files (.css)

JavaScript Files (.js)

Configuration Files (.json, .yml, .toml, etc.)

Naming Conventions

Everything uses PascalCase unless ecosystem or technical requirements force exceptions (see Web Framework Exceptions).

Files & Directories

Python files: BookService.py, DatabaseManager.py, FilterPanel.py
Directories: Source/, Assets/, Tests/, Scripts/
Documentation: DesignStandard.md, ReadMe.md, MigrationGuide.md
Scripts: UpdateFiles.py, CreateThumbnails.py, BackupDatabase.py

Code Elements

Classes: BookService, DatabaseManager, FilterPanel
Functions: GetCategories(), SearchBooks(), DisplayResults()
Variables: BookTitle, CategoryList, SearchCriteria
Constants: MAXRESULTS, DEFAULTPATH, APITIMEOUT

Database Elements

Databases: LibraryDatabase, UserProfiles, SystemLogs
Tables: Books, Categories, UserSessions, AuditLogs
Columns: BookTitle, CategoryName, CreatedDate, LastModified
Indexes: IXBooksCategory, IXUsersEmail, IXLogsDate
Constraints: PKBooksID, FKBooksCategory, UKUsersEmail

Web Framework Exceptions

CRITICAL: Modern web development requires specific ecosystem conventions that override PascalCase rules. These exceptions are mandatory for technical compatibility.

Directory Names - Web Specific

‚úÖ CORRECT - Web Standards:

‚ùå AVOID - Broken Web Conventions:

File Names - Web Ecosystem

‚úÖ CORRECT - Web Standards:

API Naming - Framework Specific

‚úÖ CORRECT - API Conventions:

Frontend Framework Exceptions

React/Vue/Angular:

CSS/SCSS Conventions

‚úÖ CORRECT - CSS Standards:

Exception Documentation Required

All files using exceptions MUST include justification:

Design Standards

Note: These standards apply to all production code. Exception: 1-shot down and dirty scripts may deviate from these requirements when documented.

Code Organization

Module size limit: No module should exceed 300 lines of code
Single responsibility: Modules should address unique sets of design elements
Cohesion: Related functionality should be grouped together
Coupling: Minimize dependencies between modules

Web-Specific Standards

API responses: Always return consistent JSON structure
Error handling: Use proper HTTP status codes
Frontend components: Maximum 200 lines per component
CSS classes: Follow BEM methodology for complex UIs
JavaScript functions: Maximum 50 lines per function

File & Directory Structure

Standard Project Directory Structure

Automated File Management

Enhanced UpdateFiles.py Integration with Web Framework Support

Web-Aware File Processing

Processing Rules

Python Backend: Standard PascalCase rules apply
Web Frontend: Framework exceptions override PascalCase
Mixed Projects: Context-sensitive processing based on path
Configuration Files: Always follow ecosystem requirements

Modern Web Development

Frontend Standards

HTML5 Requirements:

CSS Best Practices:

JavaScript Standards:

Backend API Standards

FastAPI Structure:

Response Format:

AI Collaboration Practices

Enhanced AI Requirements

Pre-Code Checklist:
[ ] Current date and time determined
[ ] Header will use ACTUAL timestamp, not placeholder
[ ] Path matches exact project structure
[ ] Web framework exceptions considered
[ ] Standard: AIDEV-PascalCase-1.9 included
[ ] Description matches module purpose

Batch File Rules:
Each file gets its own timestamp when created
No copy-paste timestamps between files
Progressive time progression for files created in sequence
Web conventions properly applied

Timestamp Validation:

SQL and Data Access

NO SQLAlchemy. Use raw SQL and parameterized queries only.
Database naming: PascalCase for ALL elements (tables, columns, indexes, constraints)
SQL file naming: CreateUserProfilesTable.sql, UpdateSchemav1_2.sql
SQL files must use standard headers

Complete SQL Example:

Testing & Quality

All code must be covered by pytest unit tests.
Test coverage goal: 80%+
Web API testing: Use FastAPI TestClient
Frontend testing: Use appropriate framework testing tools
Integration testing: Test full API workflows

API Test Example:

Attribution & License

Attribution and contact are included at the head of the standard and in each major module as needed.
License: MIT License
Special thanks to the open-source community and the AI models that help build and document this project.

Revision History

1.6: Original AIDEV-PascalCase Standards (Herb Bowers)
1.7: Clarified ecosystem exceptions, formalized policies
1.8: Extended PascalCase to database elements, added comprehensive headers, automated file management
1.9:
MAJOR: Added comprehensive web framework exceptions
MAJOR: Integrated AI compliance requirements from v1.8a
MAJOR: Enhanced for modern web development (FastAPI, React, Vue)
NEW: Web-aware UpdateFiles.py processing rules
NEW: Frontend/backend separation standards
NEW: REST API conventions and response formats
NEW: HTML/CSS/JavaScript header formats
NEW: Progressive timestamp enforcement for AI
ENHANCED: Comprehensive ecosystem exception handling
ENHANCED: Mobile-first responsive design standards

This standard is a living document. Compliance with timestamp requirements is MANDATORY and NOT NEGOTIABLE for all contributors, human or AI. Web framework exceptions are technically required and override PascalCase rules where specified.